<?php
/*--------------------------------------------------*/
/* FILE GENERATED BY INVISION POWER BOARD 3         */
/* CACHE FILE: Skin set id: 2               */
/* CACHE FILE: Generated: Tue, 11 Jun 2013 11:11:58 GMT */
/* DO NOT EDIT DIRECTLY - THE CHANGES WILL NOT BE   */
/* WRITTEN TO THE DATABASE AUTOMATICALLY            */
/*--------------------------------------------------*/

class skin_ucp_2 extends skinMaster{

/**
* Construct
*/
function __construct( ipsRegistry $registry )
{
	parent::__construct( $registry );
	

$this->_funcHooks = array();
$this->_funcHooks['coreAttachments'] = array('attachmentThumbLocation','attachmentPost','attach','attachAlmostFull','hasAttachLimit','hasPagesTop','hasAttachments','attachmentMultiDelete','hasPagesBottom','attachmentThumbLocation','attachmentPost','attach','attachAlmostFull','hasAttachLimit','hasPagesTop','hasAttachments','attachmentMultiDelete','hasPagesBottom');
$this->_funcHooks['displayNameForm'] = array('dnameOkMessage','dnameFbUser','dnameOkMessage','dnameFbUser');
$this->_funcHooks['emailPasswordChangeForm'] = array('hideMessageIfAdmin','emailIsAdmin','passFbUser','removeUser','removeUser2','removeUser3','removeUser4','emailIsNotAdmin','emailIsAdmin','passFbUser','emailIsNotAdmin','removeUser','changePasswordNotAdmin');
$this->_funcHooks['field_entry'] = array('cfieldDesc','cfieldDesc','cfieldDesc','cfieldDesc');
$this->_funcHooks['membersFacebookConnect'] = array('fbShowStatus','fbSyncPic','fbSyncStatus','canUpdateStatus','fbSyncStatus','statusImportGroup','fbLastSync','pImgE','pCheckE','pImgPS','pCheckPS','pImgRS','pCheckRS','fbPassword','fbDefaultEmail','fbMismatch','fbShowStatus','fbSyncPic','fbSyncStatus','canUpdateStatus','fbSyncAboutMe','fbLastSync','fbDefaultEmail','fbMismatch','fbNoEmailWarning');
$this->_funcHooks['membersIgnoredUsersForm'] = array('ignoreMemberTopics','ignoreMemberSigs','ignoreGlobal','ignoreMemberPms','ignoreUserchats','hasChatRow','members','canSee','topPagination','hasChat','hasChatNone','bottomPagination','hasChatRowCheckbox','ignoreMemberTopics','ignoreMemberPms','members','topPagination','bottomPagination');
$this->_funcHooks['membersProfileForm'] = array('isOurTimezone','timezones','monthSelected','months','daySelected','days','yearSelected','years','canUploadPhoto','dstError','doAutoDst','doManualDst','doManualDst','showComments','yesModComments','showLastVisitors','showFriends','yesModFriends','friendsEnabled','changeMemberTitle','birthdayFields','showProfileInfo','requiredCfields','optionalCfields','monthSelected','months','daySelected','days','yearSelected','years','showComments','commentsNone','commentsEmail','commentsPm','noModComments','yesModComments','showFriends','friendsNone','friendsEmail','friendsPm','noModFriends','yesModFriends','friendsEnabled','showFriends','changeMemberTitle','birthdayFields','requiredCfields','optionalCfields');
$this->_funcHooks['membersSignatureForm'] = array('hasSignatureLimits','htmlModeOn','canUseHtml','disablelightbox','hasSignatureLimits','disablelightbox');
$this->_funcHooks['membersTwitterConnect'] = array('tcHasPic','tcShowStatus','tcHasPic','tcLastSync','tcSyncPic','tcSyncStatus','tcSyncIStatus','statusImportGroup','tcSyncAboutMe','tcSyncBgImg','canBG','twitterPassword');
$this->_funcHooks['notificationsForm'] = array('hasconfignotify','hasconfigdisable','hasconfignotify','hasconfigdisable','hasconfignotify','hasconfigdisable','keyExists','groupKeys','isPrivateMsg','badConfig','isTopicsOrPosts','notifyGroupsList','isCoreNot','updateLastApp','newNotApp','hasconfignotify','hasconfigdisable','hasconfignotify','hasconfigdisable','hasconfignotify','hasconfigdisable','keyNotDone','notifyOther','allowAdminMails','hasconfignotify','hasconfigdisable','hasconfignotify','hasconfigdisable','hasconfignotify','hasconfigdisable','keyExists','groupKeys','isPrivateMsg','badConfig','isTopicsOrPosts','notifyGroupsList','isCoreNot','updateLastApp','newNotApp','hasconfignotify','hasconfigdisable','hasconfignotify','hasconfigdisable','hasconfignotify','hasconfigdisable','keyNotDone','notifyOther','allowAdminMails');
$this->_funcHooks['notificationsLog'] = array('hasReadNotify','hasReadNotify','categories','hasconfirm','hasnotifyerror','hasNotifications','hasNotifyForMod','categories','hasconfirm','hasnotifyerror','hasNotifyForMod');
$this->_funcHooks['userCPTemplate'] = array('isSettings','isSettingsInactive','active_tab','tabs','tabsMenus_active','items','errors','has_max_upload','usercp_form','hasMoreThanOneTabClass','hasMoreThanOneTabSidebar','hasMoreThanOneTabClassContent','has_errors','didSave','submit_button','end_form');


}

/* -- coreAttachments --*/
function coreAttachments($info="",$pages="",$attachments) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['coreAttachments'] ) )
{
$count_44408278dd9f257ad8b6b7952089a3f6 = is_array($this->functionData['coreAttachments']) ? count($this->functionData['coreAttachments']) : 0;
$this->functionData['coreAttachments'][$count_44408278dd9f257ad8b6b7952089a3f6]['info'] = $info;
$this->functionData['coreAttachments'][$count_44408278dd9f257ad8b6b7952089a3f6]['pages'] = $pages;
$this->functionData['coreAttachments'][$count_44408278dd9f257ad8b6b7952089a3f6]['attachments'] = $attachments;
}

if ( ! isset( $this->registry->templateStriping['attach'] ) ) {
$this->registry->templateStriping['attach'] = array( FALSE, "row1","row2");
}
$IPBHTML .= "<div class='row1'>	
	" . (($info['has_limit'] == 1) ? ("<div id='space_allowance' class='general_box'>
			<p><strong>{$info['attach_space_used']}</strong></p>
			<p class='progress_bar " . (($info['full_percent'] > 80) ? ("limit") : ("")) . "' title='{$this->lang->words['ucp_attach_allowance']} {$info['full_percent']}% {$this->lang->words['ucp_full']}'>
				<span style='width: {$info['full_percent']}%'>{$info['full_percent']}%</span>
			</p>
			<p class='desc'>{$info['attach_space_count']}</p>
		</div>") : ("")) . "
	" . (($pages) ? ("
		<div class='topic_controls'>
			{$pages}
		</div>
		<br class='clear' />
	") : ("")) . "
	<!-- ATTACHMENTS TABLE -->
	<form action=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;tab=core&amp;area=updateAttachments&amp;do=saveIt", "public",'' ), "", "" ) . "\" id=\"checkBoxForm\" method=\"post\">
	<table class='ipb_table' summary=\"{$this->lang->words['ucp_user_attach']}\">
		<tr class='header'>
				<th scope='col' style='width: 2%'>&nbsp;</th>
				<th scope='col' style='width: 35%'>{$this->lang->words['attach_title']}</th>
				<th scope='col' style='width: 7%'>{$this->lang->words['attach_hsize']}</th>
				<th scope='col' style='width: 27%'>{$this->lang->words['attach_topic']}</th>
				<th scope='col' class='short' style='width: 3%'><input class='input_check' id=\"checkAllAttachments\" type=\"checkbox\" value=\"{$this->lang->words['check_all']}\" /></th>
			</tr>
			" . ((count($attachments)) ? ("
								".$this->__f__9b2539f58b4fd36986a9ecbbd6c08f3c($info,$pages,$attachments)."			") : ("
				<tr>
					<td colspan=\"5\" class='no_messages'>{$this->lang->words['splash_noattach']}</td>
				</tr>
			")) . "
		</table>
		" . ((count($attachments)) ? ("
			<div class='moderation_bar rounded with_action clear' id='topic_mod'>
				<input type=\"hidden\" name=\"authKey\" value=\"{$this->member->form_hash}\" />
				<input type=\"submit\" value=\"{$this->lang->words['attach_delete']}\" class=\"input_submit alt\" />
			</div>
		") : ("")) . "
	</form>
</div>
" . (($pages) ? ("
	<div class='topic_controls'>
		{$pages}
	</div>
	<br class='clear' />
") : ("")) . "
<script type='text/javascript'>
	ipb.global.registerCheckAll( 'checkAllAttachments', 'checkall' );
</script>";
return $IPBHTML;
}


function __f__9b2539f58b4fd36986a9ecbbd6c08f3c($info="",$pages="",$attachments)
{
	$_ips___x_retval = '';
	$__iteratorCount = 0;
	foreach( $attachments as $idx => $data )
	{
		
		$__iteratorCount++;
		$_ips___x_retval .= "
					<tr id=\"a{$data['attach_id']}\" class='" .  IPSLib::next( $this->registry->templateStriping["attach"] ) . "'>
							<td class='short altrow'>
								" . (($data['attach_thumb_location']) ? ("
									<a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=attach&amp;section=attach&amp;attach_rel_module={$data['_type']}&amp;attach_id={$data['attach_id']}", "public",'' ), "", "" ) . "\" title=\"{$data['attach_file']}\"><img src=\"{$this->settings['upload_url']}/{$data['attach_thumb_location']}\" width=\"30\" height=\"30\" alt='{$this->lang->words['attached_file']}' /></a>
								") : ("
									<img src=\"{$this->settings['mime_img']}/{$data['image']}\" alt=\"{$this->lang->words['attached_file']}\" />
								")) . "
							</td>
							<td>
								<a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=attach&amp;section=attach&amp;attach_rel_module={$data['_type']}&amp;attach_id={$data['attach_id']}", "public",'' ), "", "" ) . "\" title=\"{$data['attach_file']}\">{$data['short_name']}</a><br />
								<span class=\"desc\">( {$this->lang->words['attach_hits']}: {$data['attach_hits']} )</span>
							</td>
							<td class='short altrow'>{$data['real_size']}</td>
							<td>
								" . (($data['attach_rel_id'] > 0 AND $data['attach_rel_module'] == 'post') ? ("
									<a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "showtopic={$data['tid']}&amp;view=findpost&amp;p={$data['attach_rel_id']}", "public",'' ), "", "" ) . "\" title='{$this->lang->words['ucp_view_org']}'>{$data['title']}</a>
								") : ("
									{$data['title']}
								")) . "
								<br />
								<span class=\"desc\">{$data['attach_date']}</span>
							</td>
							<td class='altrow short'><input type=\"checkbox\" name=\"attach[{$data['attach_id']}]\" value=\"1\" class=\"input_check checkall\" /></td>
						</tr>
				
";
	}
	$_ips___x_retval .= '';
	unset( $__iteratorCount );
	return $_ips___x_retval;
}

/* -- displayNameForm --*/
function displayNameForm($form=array(),$error="",$okmessage="", $isFB=false) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['displayNameForm'] ) )
{
$count_76f8c9ae9f32977b7614aeb901aff00a = is_array($this->functionData['displayNameForm']) ? count($this->functionData['displayNameForm']) : 0;
$this->functionData['displayNameForm'][$count_76f8c9ae9f32977b7614aeb901aff00a]['form'] = $form;
$this->functionData['displayNameForm'][$count_76f8c9ae9f32977b7614aeb901aff00a]['error'] = $error;
$this->functionData['displayNameForm'][$count_76f8c9ae9f32977b7614aeb901aff00a]['okmessage'] = $okmessage;
$this->functionData['displayNameForm'][$count_76f8c9ae9f32977b7614aeb901aff00a]['isFB'] = $isFB;
}
$IPBHTML .= "" . (($okmessage != "") ? ("
	<p class='message'>{$okmessage}</p>
") : ("")) . "
<fieldset class='row1'>
	<h3>{$this->lang->words['dname_title']}</h3>
	<br />
	" . (($form['_noPerm']) ? ("
		<p class='message error'>{$form['_noPerm']}</p>
	") : ("<p class='message unspecific'>{$form['_lang_string']}</p>
		<ul>
			<li class='field'>
				<label for='displayName'>{$this->lang->words['dname_choose']}</label><input class='input_text' type=\"text\" maxlength='{$this->settings['max_user_name_length']}' name=\"displayName\" id=\"displayName\" value=\"{$this->request['displayName']}\" size='30' /> <br />
				<span class='desc'>{$this->lang->words['dname_choose2']}</span>
			</li>
			" . ((!$isFB) ? ("
			<li class='field'>
				<label for='displayPassword'>{$this->lang->words['dname_password']}</label><input class='input_text' type=\"password\" name=\"displayPassword\" id=\"displayPassword\" value=\"\" size='30' /> <br />
				<span class='desc'>{$this->lang->words['dname_password2']}</span>
			</li>
			") : ("")) . "
		</ul>")) . "
</fieldset>";
return $IPBHTML;
}

/* -- emailPasswordChangeForm --*/
function emailPasswordChangeForm($txt, $_message, $isFB=false) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['emailPasswordChangeForm'] ) )
{
$count_bceb62b179746440abdb623e21d49871 = is_array($this->functionData['emailPasswordChangeForm']) ? count($this->functionData['emailPasswordChangeForm']) : 0;
$this->functionData['emailPasswordChangeForm'][$count_bceb62b179746440abdb623e21d49871]['txt'] = $txt;
$this->functionData['emailPasswordChangeForm'][$count_bceb62b179746440abdb623e21d49871]['_message'] = $_message;
$this->functionData['emailPasswordChangeForm'][$count_bceb62b179746440abdb623e21d49871]['isFB'] = $isFB;
}
$IPBHTML .= "<script type=\"text/javascript\">
var msg = \"$_message\";
	if ( msg != \"\"){
		alert(msg);
	}
</script>
<fieldset class='row1'>
	<h3>{$this->lang->words['change_email_title']}</h3>
	<br />
	<p class='message unspecific'>
		" . (($this->memberData['g_access_cp']) ? ("
			{$this->lang->words['admin_emailpassword']}
		") : ("
			{$txt}
		")) . "
	</p>
	" . ((!$this->memberData['g_access_cp']) ? ("<ul>
			<li class='field'>
				<label for='in_email_1'>{$this->lang->words['ce_new_email']}</label>
				<input type=\"text\" name=\"in_email_1\" id='in_email_1' class='input_text' value=\"\" />
			</li>
			<li class='field'>
				<label for='in_email_2'>{$this->lang->words['ce_new_email2']}</label>
				<input type=\"text\" name=\"in_email_2\" id='in_email_2' class='input_text' value=\"\" />
			</li>
			" . ((!$isFB) ? ("
			<li class='field'>
				<label for='password'>{$this->lang->words['ec_passy']}</label>
				<input type=\"password\" id='password' class='input_text' name=\"password\" value=\"\" />
			</li>
			") : ("")) . "
		</ul>") : ("")) . "
</fieldset>
<fieldset class='row1'>
	<h3>{$this->lang->words['account_pass_title']}</h3>
	<br />
	<p class='message unspecific'>
			" . ((! $this->memberData['bw_local_password_set'] AND $this->memberData['members_created_remote']) ? ("
				{$this->lang->words['remote_pass_set']}
			") : ("
				{$this->lang->words['pass_change_text']}
			")) . "
	</p>
	
	" . ((!$this->memberData['g_access_cp']) ? ("
		<ul>
			<li class='field'>
				<label for='current_pass'>{$this->lang->words['account_pass_old']}</label>
				<input type=\"password\" name=\"current_pass\" value=\"\" id='current_pass' class='input_text' />
			</li>
			<li class='field'>
				<label for='new_pass_1'>{$this->lang->words['account_pass_new']}</label>
				<input type=\"password\" name=\"new_pass_1\" value=\"\" id='new_pass_1' class='input_text' />
			</li>
			<li class='field'>
				<label for='new_pass_2'>{$this->lang->words['account_pass_new2']}</label>
				<input type=\"password\" name=\"new_pass_2\" value=\"\" id='new_pass_2' class='input_text' />
			</li>
		</ul>
	") : ("")) . "
</fieldset>";
return $IPBHTML;
}

/* -- field_dropdown --*/
function field_dropdown($name="",$options="") {
$IPBHTML = "";
$IPBHTML .= "<select name=\"{$name}\" class='input_select'>
	{$options}
</select>";
return $IPBHTML;
}

/* -- field_entry --*/
function field_entry($title="",$desc="",$content="",$id="") {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['field_entry'] ) )
{
$count_6aed091d098a7bc7061d230dc970f10d = is_array($this->functionData['field_entry']) ? count($this->functionData['field_entry']) : 0;
$this->functionData['field_entry'][$count_6aed091d098a7bc7061d230dc970f10d]['title'] = $title;
$this->functionData['field_entry'][$count_6aed091d098a7bc7061d230dc970f10d]['desc'] = $desc;
$this->functionData['field_entry'][$count_6aed091d098a7bc7061d230dc970f10d]['content'] = $content;
$this->functionData['field_entry'][$count_6aed091d098a7bc7061d230dc970f10d]['id'] = $id;
}
$IPBHTML .= "<li class='custom'>
	<label for='field_{$id}' class='ipsSettings_fieldtitle'>{$title}</label>
	" . ((stristr($content, 'radio') || stristr($content, 'checkbox')) ? ("<p class='wrap'>{$content}</p>
		" . (($desc) ? ("<span class='desc'>{$desc}</span>") : ("")) . "") : ("{$content}
		" . (($desc) ? ("<br /><span class='desc'>{$desc}</span>") : ("")) . "")) . "
	
</li>";
return $IPBHTML;
}

/* -- field_textarea --*/
function field_textarea($name="",$value="") {
$IPBHTML = "";
$IPBHTML .= "<textarea cols=\"80\" rows=\"5\" wrap=\"soft\" name=\"$name\" class='input_text'>{$value}</textarea>";
return $IPBHTML;
}

/* -- field_textinput --*/
function field_textinput($name="",$value="") {
$IPBHTML = "";
$IPBHTML .= "<input type=\"text\" size=\"50\" name=\"{$name}\" value='{$value}' class='input_text' />";
return $IPBHTML;
}

/* -- membersFacebookConnect --*/
function membersFacebookConnect($fbuid, $fbUserData, $linkedMemberData, $perms) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['membersFacebookConnect'] ) )
{
$count_bce15876b551f0500e6c4e0b44ffbbbc = is_array($this->functionData['membersFacebookConnect']) ? count($this->functionData['membersFacebookConnect']) : 0;
$this->functionData['membersFacebookConnect'][$count_bce15876b551f0500e6c4e0b44ffbbbc]['fbuid'] = $fbuid;
$this->functionData['membersFacebookConnect'][$count_bce15876b551f0500e6c4e0b44ffbbbc]['fbUserData'] = $fbUserData;
$this->functionData['membersFacebookConnect'][$count_bce15876b551f0500e6c4e0b44ffbbbc]['linkedMemberData'] = $linkedMemberData;
$this->functionData['membersFacebookConnect'][$count_bce15876b551f0500e6c4e0b44ffbbbc]['perms'] = $perms;
}

if ( ! isset( $this->registry->templateStriping['usercp'] ) ) {
$this->registry->templateStriping['usercp'] = array( FALSE, "row1","row2");
}
$IPBHTML .= "<!-- Not authorized email? -->
" . ((! $this->memberData['fb_emailallow'] AND strstr( $this->memberData['email'], '@proxymail.facebook.com' )) ? ("
<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
	<h3>{$this->lang->words['fb_email_not_allowed']}</h3>
	<p>{$this->lang->words['fb_email_not_allowed_desc']}</p>
</fieldset>
") : ("" . (($fbuid AND $linkedMemberData['member_id'] AND $linkedMemberData['member_id'] != $this->memberData['member_id']) ? ("
		<!-- currently logged in FB user is linked to a different account -->
		<div class='message error'>
			<strong>{$this->lang->words['fb_connect_mismatch']}</strong>
			<p>{$this->lang->words['fb_connect_mismatch_desc']}</p>
		</div>
	") : ("<div id='fbUserBox'>
			{$this->lang->words['fb_config']}
			<br />
			<br />
			<fb:login-button size=\"medium\" background=\"light\" length=\"long\" onlogin=\"ipb.facebook.usercp_loadUser();\"></fb:login-button>
		</div>
		<div id='fb-template' style='display:none'>
			<fieldset class='row2'>
				<div style='float:left; margin-right:4px;margin-bottom:3px'>
					<fb:profile-pic uid=\"loggedinuser\" facebook-logo=\"true\"></fb:profile-pic>
				</div>
				{$this->lang->words['fb_logged_in_as']} <strong><fb:name uid=\"loggedinuser\" useyou=\"false\"></fb:name></strong>
				" . ((is_array($fbUserData['status']) AND $fbUserData['status']['message']) ? ("
					<br /><br /><p class='desc'>{$fbUserData['first_name']} {$fbUserData['status']['message']}</p>
				") : ("")) . "
			</fieldset>
			<fieldset class='row1'>
				<h3>{$this->lang->words['fb_sync_options']}</h3>
				<ul>
					<li class='field checkbox'>
						<input class='input_check' type='checkbox' value='1' name='fbc_s_pic' value='1' " . (($this->memberData['fbc_s_pic'] > 0) ? ("checked='checked'") : ("")) . " id='fbc_s_pic' /><label for='fbc_s_pic'>{$this->lang->words['fb_sync_photo']}</label>
					</li>
" . (($this->memberData['can_updated_status']) ? ("<li class='field checkbox'>
						<input class='input_check' type='checkbox' value='1' name='fbc_s_status' value='1' " . (($this->memberData['fbc_s_status'] > 0) ? ("checked='checked'") : ("")) . " id='fbc_s_status' /><label for='fbc_s_status'>{$this->lang->words['fb_sync_status']}</label>
					</li>") : ("")) . "
					<li class='field checkbox'>
						<input class='input_check' type='checkbox' value='1' name='fbc_s_aboutme' value='1' " . (($this->memberData['fbc_s_aboutme'] > 0) ? ("checked='checked'") : ("")) . " id='fbc_s_aboutme' /><label for='fbc_s_aboutme'>{$this->lang->words['fb_sync_aboutme']}</label>
					</li>
				</ul>
				<p class='desc'>
					{$this->lang->words['fb_last_syncd']}
					" . (($this->memberData['fb_lastsync']) ? ("
						" . IPSText::htmlspecialchars($this->registry->getClass('class_localization')->getDate($this->memberData['fb_lastsync'],"long", 0)) . "
					") : ("
						{$this->lang->words['fb_never']}
					")) . "
				</p>
				<p><input type='submit' class='input_submit alt' id='fbc_sync' value='{$this->lang->words['fb_sync_now']}' /></p>
			</fieldset>
			<fieldset class='row1'>
				<h3>{$this->lang->words['fb_disassociate']}</h3>
				<p class='desc'>{$this->lang->words['fb_disassociate_desc']}</p>
				" . ((strstr( $this->memberData['email'], '@proxymail.facebook.com' )) ? ("
					<div class='message'>
						<strong>{$this->lang->words['fb_using_email']}</strong>
						<p>{$this->lang->words['fb_disassociate_info_1']} <a href='" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;tab=core&amp;area=email", "public",'' ), "", "" ) . "'>{$this->lang->words['fb_disassociate_info_2']}</a> {$this->lang->words['fb_disassociate_info_3']}
						</p>
					</div>
					<br />
				") : ("")) . "
				<p><input type='button' class='input_submit alt' id='fbc_remove' value='{$this->lang->words['fb_disassociate_now']}' /></p>
			</fieldset>
		</div>
	
		<script type=\"text/javascript\">
			/* Init Facebook JS */
			try
			{
				ipb.facebook.mem_fb_uid = " . intval($this->memberData['fb_uid']) . ";
				
				FB_RequireFeatures([\"XFBML\"], function()
				{
					FB.init(\"{$this->settings['fbc_appid']}\", \"{$this->settings['fbc_xdlocation']}\" );
					FB.Facebook.get_sessionState().waitUntilReady(function()
					{
						FB.Connect.ifUserConnected( ipb.facebook.usercp_loadUser );
					} );
				} );
			}
			catch( error )
			{
				//alert( error );
			}
		</script>")) . "")) . "";
return $IPBHTML;
}

/* -- membersIgnoredUsersForm --*/
function membersIgnoredUsersForm($members, $pagination) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['membersIgnoredUsersForm'] ) )
{
$count_05212b8de5e6d7df6d052db0d36e8f6a = is_array($this->functionData['membersIgnoredUsersForm']) ? count($this->functionData['membersIgnoredUsersForm']) : 0;
$this->functionData['membersIgnoredUsersForm'][$count_05212b8de5e6d7df6d052db0d36e8f6a]['members'] = $members;
$this->functionData['membersIgnoredUsersForm'][$count_05212b8de5e6d7df6d052db0d36e8f6a]['pagination'] = $pagination;
}

if ( ! isset( $this->registry->templateStriping['members'] ) ) {
$this->registry->templateStriping['members'] = array( FALSE, "row1","row2");
}
$IPBHTML .= "<script type='text/javascript'>
//<![CDATA[
	ipb.templates['autocomplete_wrap'] = new Template(\"<ul id='#{id}' class='ipbmenu_content' style='width: 250px;'></ul>\");
	ipb.templates['autocomplete_item'] = new Template(\"<li id='#{id}'><img src='#{img}' alt='' width='#{img_w}' height='#{img_h}' />&nbsp;&nbsp;#{itemvalue}</li>\");
//]]>
</script>
<fieldset class='row1'>
	<h3 class='maintitle'>{$this->lang->words['mi5_title']}</h3>
    " . (($pagination) ? ("
	    {$pagination}
	    <br class='clear' />
	    <br />
    ") : ("")) . "
	<table class='ipb_table' summary=\"{$this->lang->words['ucp_ignored_users']}\">
		<tr class='header'>
			<th scope='col' width=\"30%\">{$this->lang->words['mi5_name']}</th>
			<th scope='col' width=\"30%\">{$this->lang->words['mi5_group']}</th>
			<th scope='col' width=\"10%\">{$this->lang->words['mi5_posts']}</th>
			<th scope='col' width=\"10%\">{$this->lang->words['ucp_ignore_posts']}</th>
			<th scope='col' width=\"10%\">{$this->lang->words['ucp_ignore_msgs']}</th>
			<th scope='col' width=\"10%\">&nbsp;</th>
		</tr>
				".$this->__f__7c00b4f5e8c3c6358d42e6560065e66b($members,$pagination)."	</table>
    " . (($pagination) ? ("
	    <br />
	    {$pagination}
	    <br class='clear' />
    ") : ("")) . "
</fieldset>
<fieldset class=\"row2\">
	<h3>{$this->lang->words['mi5_addem']}</h3>
	<ul>
		<li class='field'>
			<label for='newbox_1'>{$this->lang->words['ucp_members_name']}</label>
			<input type=\"text\" size='40' name=\"newbox_1\" id=\"newbox_1\" value=\"{$this->request['newbox_1']}\" />
			<ul>
				<li class='field checkbox'>
					<input type='checkbox' class='input_check' name='ignore_messages' value='1' />
					{$this->lang->words['ucp_ignore_pc']}
				</li>
				<li class='field checkbox'>
					<input type='checkbox' class='input_check' name='ignore_topics' value='1' checked='checked' />
					{$this->lang->words['ucp_ignore_posts']}
				</li>
			</ul>
		</li>
	</ul>
</fieldset>
<script type=\"text/javascript\">
	document.observe(\"dom:loaded\", function(){
		var url = ipb.vars['base_url'] + 'app=core&module=ajax&section=findnames&do=get-member-names&secure_key=' + ipb.vars['secure_hash'] + '&name=';
		new ipb.Autocomplete( $('newbox_1'), { multibox: false, url: url, templates: { wrap: ipb.templates['autocomplete_wrap'], item: ipb.templates['autocomplete_item'] } } );
	});
</script>";
return $IPBHTML;
}


function __f__7c00b4f5e8c3c6358d42e6560065e66b($members, $pagination)
{
	$_ips___x_retval = '';
	$__iteratorCount = 0;
	foreach( $members as $member )
	{
		
		$__iteratorCount++;
		$_ips___x_retval .= "
			<tr class='" .  IPSLib::next( $this->registry->templateStriping["members"] ) . "'>
				<td>
					<img src='{$member['pp_thumb_photo']}' width='{$member['pp_thumb_width']}' height='{$member['pp_thumb_height']}' border='0' />
					<strong><a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "showuser={$member['member_id']}", "public",'' ), "{$member['members_seo_name']}", "showuser" ) . "\">{$member['members_display_name']}</a></strong>
					<p>{$this->lang->words['m_joined']} " . IPSText::htmlspecialchars($this->registry->getClass('class_localization')->getDate($member['joined'],"joined", 0)) . "</p>
				</td>
				<td>{$member['g_title']}</td>
				<td>{$member['posts']}</td>
				<td>
					" . (($member['ignoreData']['ignore_topics'] == 1) ? ("
						<a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;tab=members&amp;area=toggleIgnoredUser&amp;do=saveIt&amp;id={$member['member_id']}&amp;field=topics", "public",'' ), "", "" ) . "\" title=\"{$this->lang->words['click_toggle']}\">{$this->lang->words['yes']}</a>
					") : ("
						<a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;tab=members&amp;area=toggleIgnoredUser&amp;do=saveIt&amp;id={$member['member_id']}&amp;field=topics", "public",'' ), "", "" ) . "\" title=\"{$this->lang->words['click_toggle']}\">{$this->lang->words['no']}</a>
					")) . "
				</td>
				<td>
					" . (($member['ignoreData']['ignore_messages'] == 1) ? ("
						<a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;tab=members&amp;area=toggleIgnoredUser&amp;do=saveIt&amp;id={$member['member_id']}&amp;field=messages", "public",'' ), "", "" ) . "\" title=\"{$this->lang->words['click_toggle']}\">{$this->lang->words['yes']}</a>
					") : ("
						<a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;tab=members&amp;area=toggleIgnoredUser&amp;do=saveIt&amp;id={$member['member_id']}&amp;field=messages", "public",'' ), "", "" ) . "\" title=\"{$this->lang->words['click_toggle']}\">{$this->lang->words['no']}</a>
					")) . "
				</td>
				<td><a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;tab=members&amp;area=removeIgnoredUser&amp;do=saveIt&amp;id={$member['member_id']}", "public",'' ), "", "" ) . "\">{$this->lang->words['mi5_remove']}</a></td>
			</tr>
		
";
	}
	$_ips___x_retval .= '';
	unset( $__iteratorCount );
	return $_ips___x_retval;
}

/* -- membersProfileCustomize --*/
function membersProfileCustomize($options, $input, $errors) {
$IPBHTML = "";
$IPBHTML .= "<!--no data in this master skin-->";
return $IPBHTML;
}

/* -- membersProfileForm --*/
function membersProfileForm($custom_fields='',$group_titles='',$day='',$mon='',$year='', $amEditor='', $times=array()) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['membersProfileForm'] ) )
{
$count_762cfc317ee9ffe8f4e829237f99a1a6 = is_array($this->functionData['membersProfileForm']) ? count($this->functionData['membersProfileForm']) : 0;
$this->functionData['membersProfileForm'][$count_762cfc317ee9ffe8f4e829237f99a1a6]['custom_fields'] = $custom_fields;
$this->functionData['membersProfileForm'][$count_762cfc317ee9ffe8f4e829237f99a1a6]['group_titles'] = $group_titles;
$this->functionData['membersProfileForm'][$count_762cfc317ee9ffe8f4e829237f99a1a6]['day'] = $day;
$this->functionData['membersProfileForm'][$count_762cfc317ee9ffe8f4e829237f99a1a6]['mon'] = $mon;
$this->functionData['membersProfileForm'][$count_762cfc317ee9ffe8f4e829237f99a1a6]['year'] = $year;
$this->functionData['membersProfileForm'][$count_762cfc317ee9ffe8f4e829237f99a1a6]['amEditor'] = $amEditor;
$this->functionData['membersProfileForm'][$count_762cfc317ee9ffe8f4e829237f99a1a6]['times'] = $times;
}

if ( ! isset( $this->registry->templateStriping['usercp'] ) ) {
$this->registry->templateStriping['usercp'] = array( FALSE, "row1","row2");
}
$IPBHTML .= "<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
	<h3>{$this->lang->words['ucp_comments']}</h3>
	<ul>
		<li class='field checkbox'>
			<input class='input_check' type='checkbox' value='1' name='pp_setting_count_comments' value='1' " . (($this->memberData['pp_setting_count_comments'] > 0) ? ("checked='checked'") : ("")) . " id='comments_enable' /><label for='comments_enable'>{$this->lang->words['ucp_enable_comments']}</label>
		</li>
		<li class='field'>
			<label for='comments_notify'>{$this->lang->words['ucp_comment_notify_type']}</label>
			<select name='pp_setting_notify_comments' id='comments_notify' class='input_select'>
				<option value='none'" . (($this->memberData['pp_setting_notify_comments'] == 'none') ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_none']}</option>
				<option value='email'" . (($this->memberData['pp_setting_notify_comments'] == 'email') ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_email']}</option>
				<option value='pm'" . (($this->memberData['pp_setting_notify_comments'] == 'pm') ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_pm']}</option>
			</select>
		 	<br />
			<span class='desc'>{$this->lang->words['m_choose_comm_type']}</span>
		</li>
		<li class='field'>
			<label for='comments_moderate'>{$this->lang->words['ucp_comment_approval']}</label>
			<select name='pp_setting_moderate_comments' id='comments_moderate' class='input_select'>
				<option value='0'" . ((! $this->memberData['pp_setting_moderate_comments']) ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_disabled']}</option>
				<option value='1'" . (($this->memberData['pp_setting_moderate_comments']) ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_enabled']}</option>
			</select>
			<br />
			<span class='desc'>{$this->lang->words['m_choose_cmod_type']}</span>
		</li>
	</ul>
</fieldset>
" . (($this->settings['friends_enabled'] AND $this->memberData['g_can_add_friends']) ? ("<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
		<h3>{$this->lang->words['ucp_friends']}</h3>
		<ul>
			<li class='field checkbox'>
				<input class='input_check' type='checkbox' value='1' name='pp_setting_count_friends' value='1' " . (($this->memberData['pp_setting_count_friends'] > 0) ? ("checked='checked'") : ("")) . " id='friends_enable' /><label for='friends_enable'>{$this->lang->words['ucp_show_friends_profile']}</label>
			</li>
			<li class='field'>
				<label for='friend_notify'>{$this->lang->words['ucp_friend_notify']}</label>
				<select name='pp_setting_notify_friend' id='friend_notify' class='input_select'>
					<option value='none'" . (($this->memberData['pp_setting_notify_friend'] == 'none') ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_none']}</option>
					<option value='email'" . (($this->memberData['pp_setting_notify_friend'] == 'email') ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_email']}</option>
					<option value='pm'" . (($this->memberData['pp_setting_notify_friend'] == 'pm') ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_pm']}</option>
				</select>
				<br />
				<span class='desc'>{$this->lang->words['m_choose_friend_type']}</span>
			</li>
			<li class='field'>
				<label for='friend_moderate'>{$this->lang->words['ucp_friend_approve']}</label>
				<select name='pp_setting_moderate_friends' id='friend_moderate' class='input_select'>
					<option value='0'" . ((! $this->memberData['pp_setting_moderate_friends']) ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_disabled']}</option>
					<option value='1'" . (($this->memberData['pp_setting_moderate_friends']) ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_enabled']}</option>
				</select>
				<br />
				<span class='desc'>{$this->lang->words['m_choose_fmod_type']}</span>
			</li>
		</ul>
	</fieldset>") : ("")) . "
<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
	<h3>{$this->lang->words['profile_information']}</h3>
	<ul>
		<li class='field checkbox'>
			<input class='input_check' type='checkbox' value='1' name='pp_setting_count_visitors' value='1' " . (($this->memberData['pp_setting_count_visitors'] > 0) ? ("checked='checked'") : ("")) . " id='pp_latest_visitors' /><label for='pp_latest_visitors'>{$this->lang->words['ucp_show_x_latest']}</label>
		</li>
		" . (($this->settings['post_titlechange'] == -1 or ( $this->settings['post_titlechange'] and $this->memberData['posts'] >= $this->settings['post_titlechange'] )) ? ("
			<li class='field'>
				<label for='member_title'>{$this->lang->words['member_title']}</label>
				<input type='text' class='input_text' size='30' id='member_title' name='member_title' value='{$this->memberData['title']}' />
				<br />
				<span class='desc'>{$this->lang->words['member_title_desc']}</span>
			</li>
		") : ("")) . "
		" . (($day AND $mon AND $year) ? ("
			<li class='field'>
				<label for='birthday'>{$this->lang->words['ucp_birthday_select']}</label>
				<select name=\"month\">&nbsp;
					".$this->__f__6abdd13e162b95acc9b2f585adcdae3e($custom_fields,$group_titles,$day,$mon,$year,$amEditor,$times)."				</select>			
				<select name=\"day\">&nbsp;
					".$this->__f__dd17a1c66715a2c54b5aa00878af857c($custom_fields,$group_titles,$day,$mon,$year,$amEditor,$times)."				</select> 
				<select name=\"year\">&nbsp;
					".$this->__f__770613b61a77f24c97953d8f03d0928c($custom_fields,$group_titles,$day,$mon,$year,$amEditor,$times)."				</select> <br />
				<span class='desc'>{$this->lang->words['ucp_birthday_optional']}</span>
			</li>
		") : ("")) . "
	</ul>
</fieldset>
" . (($required_output) ? ("
	<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
		<h3>{$this->lang->words['ucp_required_info']}</h3>
		<ul>
			{$required_output}
		</ul>
	</fieldset>
") : ("")) . "
" . (($optional_output) ? ("
	<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
		<h3>{$this->lang->words['ucp_other_info']}</h3>
		<ul>
			{$optional_output}
		</ul>
	</fieldset>
") : ("")) . "";
return $IPBHTML;
}


function __f__6abdd13e162b95acc9b2f585adcdae3e($custom_fields='',$group_titles='',$day='',$mon='',$year='', $amEditor='', $times=array())
{
	$_ips___x_retval = '';
	$__iteratorCount = 0;
	foreach( $mon as $m )
	{
		
		$__iteratorCount++;
		$_ips___x_retval .= "
						<option value='{$m[0]}'" . (($m[0] == $this->memberData['bday_month']) ? (" selected=\"selected\"") : ("")) . ">{$m[1]}</option>
					
";
	}
	$_ips___x_retval .= '';
	unset( $__iteratorCount );
	return $_ips___x_retval;
}

function __f__dd17a1c66715a2c54b5aa00878af857c($custom_fields='',$group_titles='',$day='',$mon='',$year='', $amEditor='', $times=array())
{
	$_ips___x_retval = '';
	$__iteratorCount = 0;
	foreach( $day as $d )
	{
		
		$__iteratorCount++;
		$_ips___x_retval .= "
						<option value='{$d[0]}'" . (($d[0] == $this->memberData['bday_day']) ? (" selected=\"selected\"") : ("")) . ">{$d[1]}</option>
					
";
	}
	$_ips___x_retval .= '';
	unset( $__iteratorCount );
	return $_ips___x_retval;
}

function __f__770613b61a77f24c97953d8f03d0928c($custom_fields='',$group_titles='',$day='',$mon='',$year='', $amEditor='', $times=array())
{
	$_ips___x_retval = '';
	$__iteratorCount = 0;
	foreach( $year as $y )
	{
		
		$__iteratorCount++;
		$_ips___x_retval .= "
						<option value='{$y[0]}'" . (($y[0] == $this->memberData['bday_year']) ? (" selected=\"selected\"") : ("")) . ">{$y[1]}</option>
					
";
	}
	$_ips___x_retval .= '';
	unset( $__iteratorCount );
	return $_ips___x_retval;
}

/* -- membersSignatureForm --*/
function membersSignatureForm($editor_html="",$sig_restrictions=array(),$signature='') {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['membersSignatureForm'] ) )
{
$count_03c7ae3bdb602447e121829c4e4da1bb = is_array($this->functionData['membersSignatureForm']) ? count($this->functionData['membersSignatureForm']) : 0;
$this->functionData['membersSignatureForm'][$count_03c7ae3bdb602447e121829c4e4da1bb]['editor_html'] = $editor_html;
$this->functionData['membersSignatureForm'][$count_03c7ae3bdb602447e121829c4e4da1bb]['sig_restrictions'] = $sig_restrictions;
$this->functionData['membersSignatureForm'][$count_03c7ae3bdb602447e121829c4e4da1bb]['signature'] = $signature;
}

if ( ! isset( $this->registry->templateStriping['usercp'] ) ) {
$this->registry->templateStriping['usercp'] = array( FALSE, "row1","row2");
}
$IPBHTML .= "<input type='hidden' name='key' value='{$key}' />
<input type='hidden' name='removeattachid' value='0' />" . (($preview_sig) ? ("
	<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
		<h3>{$this->lang->words['cp_current_sig']}</h3>
		<div class='signature'>
			{$preview_sig}
		</div>
	</fieldset>
") : ("")) . "
<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
	<h3>{$this->lang->words['cp_edit_sig']}</h3>
	<div>
		{$editor_html}
	</div>
</fieldset>
" . (($this->memberData['g_signature_limits']) ? ("<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
		<h3>{$this->lang->words['sig_restrictions']}</h3>
		<br />
		<div class='desc'>
			{$this->lang->words['sig_restrictions_contain']}
			<ul class='bullets'>
				" . (($sig_restrictions[1] !== '') ? ("
					<li>&bull; " . sprintf( $this->lang->words['sig_max_imagesr'], $sig_restrictions[1] ) . "</li>
				") : ("
					<li>&bull; {$this->lang->words['sig_max_imagesr_nl']}</li>
				")) . "" . (($sig_restrictions[2] !== '' || $sig_restrictions[3] !== '') ? ("
					<li>&bull; " . sprintf( $this->lang->words['sig_max_imgsize'], $sig_restrictions[2], $sig_restrictions[3] ) . "</li>
				") : ("
					<li>&bull; {$this->lang->words['sig_max_imgsize_nl']}</li>
				")) . "" . (($sig_restrictions[4] !== '') ? ("
					<li>&bull; " . sprintf( $this->lang->words['sig_max_urls'], $sig_restrictions[4] ) . "</li>
				") : ("
					<li>&bull; {$this->lang->words['sig_max_urls_nl']}</li>
				")) . "" . (($sig_restrictions[5] !== '') ? ("
					<li>&bull; " . sprintf( $this->lang->words['sig_max_lines'], $sig_restrictions[5] ) . "</li>
				") : ("
					<li>&bull; {$this->lang->words['sig_max_lines_nl']}</li>
				")) . "
			</ul>
		</div>
	</fieldset>") : ("")) . "
" . ((!$this->settings['disable_lightbox']) ? ("
" . ( method_exists( $this->registry->getClass('output')->getTemplate('global'), 'include_lightbox' ) ? $this->registry->getClass('output')->getTemplate('global')->include_lightbox() : '' ) . "
") : ("")) . "
" . ( method_exists( $this->registry->getClass('output')->getTemplate('global'), 'include_highlighter' ) ? $this->registry->getClass('output')->getTemplate('global')->include_highlighter(1) : '' ) . "";
return $IPBHTML;
}

/* -- membersSignatureFormError --*/
function membersSignatureFormError($form) {
$IPBHTML = "";
$IPBHTML .= "<fieldset class='row1'>
	<h3>{$this->lang->words['cp_edit_sig']}</h3>
	<br />
	" . (($form['_noPerm']) ? ("
		<p class='message error'>{$form['_noPerm']}</p>
	") : ("")) . "
</fieldset>";
return $IPBHTML;
}

/* -- membersTwitterConnect --*/
function membersTwitterConnect($isConnected, $twitterUser=array()) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['membersTwitterConnect'] ) )
{
$count_07887aa7f0793291349ee56b50d051c7 = is_array($this->functionData['membersTwitterConnect']) ? count($this->functionData['membersTwitterConnect']) : 0;
$this->functionData['membersTwitterConnect'][$count_07887aa7f0793291349ee56b50d051c7]['isConnected'] = $isConnected;
$this->functionData['membersTwitterConnect'][$count_07887aa7f0793291349ee56b50d051c7]['twitterUser'] = $twitterUser;
}
$IPBHTML .= "<!--no data in this master skin-->";
return $IPBHTML;
}

/* -- notificationsForm --*/
function notificationsForm($config, $emailData) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['notificationsForm'] ) )
{
$count_394b53e78b365ac9a54b1b5dd7cc1c3b = is_array($this->functionData['notificationsForm']) ? count($this->functionData['notificationsForm']) : 0;
$this->functionData['notificationsForm'][$count_394b53e78b365ac9a54b1b5dd7cc1c3b]['config'] = $config;
$this->functionData['notificationsForm'][$count_394b53e78b365ac9a54b1b5dd7cc1c3b]['emailData'] = $emailData;
}

$this->notifyGroups = array(
			'topics_posts' => array( 'followed_topics', 'followed_forums', 'followed_topics_digest', 'followed_forums_digest', 'post_quoted', 'new_likes' ),
			'status_updates' => array( 'reply_your_status', 'reply_any_status', 'friend_status_update' ),
			'profiles_friends' => array( 'profile_comment', 'profile_comment_pending', 'friend_request', 'friend_request_pending', 'friend_request_approve' ),
			'private_msgs' => array( 'new_private_message', 'reply_private_message', 'invite_private_message' )
		);
		
		$this->_config = $config;
		
		$this->_colCount = IPSMember::canReceiveMobileNotifications() ? 4 : 3;
		
		$this->_lastApp	= '';
$IPBHTML .= "<h3 class='ipsType_subtitle'>{$this->lang->words['board_prefs']}</h3>
<fieldset class='row1'>
	<h3>{$this->lang->words['privacy_settings']}</h3>
	<ul>
		<li class='field checkbox'>
			<input type='checkbox' class='input_check' id='admin_updates' name='admin_send' value='1'" . (($this->memberData['allow_admin_mails']) ? (" checked=\"checked\"") : ("")) . "/> <label for='admin_updates'>{$this->lang->words['admin_send']}</label><br />
			<span class='desc lighter'>{$this->lang->words['admin_send_desc']} {$time}</span>
		</li>
	</ul>
</fieldset>
<fieldset class='row1'>
	<span class='desc'><strong>{$this->lang->words['notifications_info_acp']}</strong></span>
		<table class='ipb_table notification_table'>
		<tr>
			<th>&nbsp;</th>
			<th style='width: 15%' class='short'><span class='notify_icon inline'>&nbsp;</span> {$this->lang->words['notify_type_inline']}</th>
			<th style='width: 15%' class='short'><span class='notify_icon email'>&nbsp;</span> {$this->lang->words['notify_type_email']}</th>
			" . ((IPSMember::canReceiveMobileNotifications()) ? ("
			<th style='width: 15%' class='short'><span class='notify_icon mobile'>&nbsp;</span> {$this->lang->words['notify_type_mobile']}</th>
			") : ("")) . "
		</tr>
		".$this->__f__6d8b098f5b25b562d6522e86089f7a96($config,$emailData)."		".$this->__f__87e22a7879113513060a2b61172c2c66($config,$emailData)."	</table>
</fieldset>";
return $IPBHTML;
}


function __f__867f3132a169c686e71b6a9d90c86bc3($config, $emailData,$groupKey='',$group='')
{
	$_ips___x_retval = '';
	$__iteratorCount = 0;
	foreach( $group as $key )
	{
		
		$__iteratorCount++;
		$_ips___x_retval .= "
				" . (($this->_config[ $key ]) ? ("<tr>
						<td class='notify_title desc'>{$this->lang->words['notify__' . $key]}</td>
						<td class='short'>
							<span class='notify_icon inline' title='{$this->lang->words['notify_type_inline']}'>&nbsp;</span>
							" . (($groupKey == 'private_msgs') ? ("
								<input type='checkbox' class='input_check' name='' checked='checked' disabled='disabled' /> <span class='ipsBadge ipsBadge_lightgrey ipsType_smaller' data-tooltip='{$this->lang->words['nots_pm_whatthef']}'>{$this->lang->words['nots_pm_list']}</span>
							") : ("" . ((isset( $this->_config[$key]['options']['inline'] ) && $groupKey != 'private_msgs') ? ("<input type='checkbox' class='input_check' id='inline_{$key}' name=\"config_{$key}[]\" value=\"inline\"" . ((is_array($this->_config[$key]['defaults']) AND in_array('inline',$this->_config[$key]['defaults'])) ? (" checked=\"checked\"") : ("")) . " " . (($this->_config[$key]['disabled']) ? (" disabled=\"disabled\"") : ("")) . " />") : ("
									<input type='checkbox' class='input_check' name='' disabled='disabled' />
								")) . "")) . "
						</td>
						<td class='short'>
							<span class='notify_icon email' title='{$this->lang->words['notify_type_email']}'>&nbsp;</span>
							" . ((isset( $this->_config[$key]['options']['email'] )) ? ("<input type='checkbox' class='input_check' id='email_{$key}' name=\"config_{$key}[]\" value=\"email\"" . ((is_array($this->_config[$key]['defaults']) AND in_array('email',$this->_config[$key]['defaults'])) ? (" checked=\"checked\"") : ("")) . " " . (($this->_config[$key]['disabled']) ? (" disabled=\"disabled\"") : ("")) . " />") : ("
								<input type='checkbox' class='input_check' name='' disabled='disabled' />
							")) . "
						</td>
						" . ((IPSMember::canReceiveMobileNotifications()) ? ("<td class='short'>
							<span class='notify_icon mobile' title='{$this->lang->words['notify_type_mobile']}'>&nbsp;</span>
							" . ((isset( $this->_config[$key]['options']['mobile'] )) ? ("<input type='checkbox' class='input_check' id='mobile_{$key}' name=\"config_{$key}[]\" value=\"mobile\"" . ((is_array($this->_config[$key]['defaults']) AND in_array('mobile',$this->_config[$key]['defaults'])) ? (" checked=\"checked\"") : ("")) . " " . (($this->_config[$key]['disabled']) ? (" disabled=\"disabled\"") : ("")) . " />") : ("
								<input type='checkbox' class='input_check' name='' disabled='disabled' />
							")) . "
						</td>") : ("")) . "
					</tr>
					" . (($this->_config[$key]['_done'] = 1) ? ("") : ("")) . "") : ("")) . "
			
";
	}
	$_ips___x_retval .= '';
	unset( $__iteratorCount );
	return $_ips___x_retval;
}

function __f__6d8b098f5b25b562d6522e86089f7a96($config, $emailData)
{
	$_ips___x_retval = '';
	$__iteratorCount = 0;
	foreach( $this->notifyGroups as $groupKey => $group )
	{
		
		$__iteratorCount++;
		$_ips___x_retval .= "
			<tr class='row2'>
				<td colspan='{$this->_colCount}'>
					<h3>{$this->lang->words[ 'notifytitle_' . $groupKey ]}</h3>
					" . (($groupKey == 'private_msgs') ? ("<p class='ipsPad_half checkbox ipsType_smaller desc '>
							<input type='checkbox' class='input_check' id='show_notification_popup' name='show_notification_popup' value='1' " . (($this->memberData['_cache']['show_notification_popup']) ? ("checked='checked'") : ("")) . " /> <label for='show_notification_popup' />{$this->lang->words['show_notification_popup']}</label><br />
						</p>") : ("")) . "
					" . (($groupKey == 'topics_posts') ? ("<p class='ipsPad_half checkbox ipsType_smaller desc '>
							<input class='input_check' type=\"checkbox\" id='auto_track' name=\"auto_track\" value=\"1\" {$emailData['auto_track']} /> <label for='auto_track' />{$this->lang->words['auto_track']}</label>
							<select name=\"trackchoice\" id='track_choice' class='input_select'>
								<option value=\"none\" {$emailData['trackOption']['none']}>{$this->lang->words['like_notify_freq_none']}</option>
								<option value=\"immediate\" {$emailData['trackOption']['immediate']}>{$this->lang->words['like_notify_freq_immediate']}</option>
								<option value=\"offline\" {$emailData['trackOption']['offline']}>{$this->lang->words['like_notify_freq_offline']}</option>
								<option value=\"daily\" {$emailData['trackOption']['daily']}>{$this->lang->words['like_notify_freq_daily']}</option>
								<option value=\"weekly\" {$emailData['trackOption']['weekly']}>{$this->lang->words['like_notify_freq_weekly']}</option>
							</select>
							" . (($emailData['auto_track'] AND $emailData['trackOption']['none']) ? ("
								<br />{$this->lang->words['auto_but_no_email']}
							") : ("")) . "
						</p>") : ("")) . "
				</td>
			</tr>
			".$this->__f__867f3132a169c686e71b6a9d90c86bc3($config,$emailData,$groupKey,$group)."							
		
";
	}
	$_ips___x_retval .= '';
	unset( $__iteratorCount );
	return $_ips___x_retval;
}

function __f__87e22a7879113513060a2b61172c2c66($config, $emailData)
{
	$_ips___x_retval = '';
	$__iteratorCount = 0;
	foreach( $this->_config as $key => $_config )
	{
		
		$__iteratorCount++;
		$_ips___x_retval .= "
			" . ((!isset( $_config['_done'] ) && $_config['_done'] != 1) ? ("" . (($this->_lastApp != $_config['app']) ? ("<tr class='row2'>
						<td colspan='{$this->_colCount}'>
							<h3>" . (($_config['app'] == 'core') ? ("{$this->lang->words['notifytitle_other']}") : ("" . IPSLib::getAppTitle( $_config['app'] ) . "")) . "</h3>
						</td>
					</tr>
					" . (($this->_lastApp = $_config['app']) ? ("") : ("")) . "") : ("")) . "
				<tr>
					<td class='notify_title desc'>{$this->lang->words['notify__' . $_config['key'] ]}</h3></td>
					<td class='short'>
						<span class='notify_icon inline' title='{$this->lang->words['notify_type_inline']}'>&nbsp;</span>
						" . ((isset( $_config['options']['inline'] )) ? ("<input type='checkbox' class='input_check' id='inline_{$key}' name=\"config_{$key}[]\" value=\"inline\"" . ((is_array($_config['defaults']) AND in_array('inline',$_config['defaults'])) ? (" checked=\"checked\"") : ("")) . " " . (($_config['disabled']) ? (" disabled=\"disabled\"") : ("")) . " />") : ("
							<input type='checkbox' class='input_check' name='' disabled='disabled' />
						")) . "
					</td>
					<td class='short'>
						<span class='notify_icon email' title='{$this->lang->words['notify_type_email']}'>&nbsp;</span>
						" . ((isset( $_config['options']['email'] )) ? ("<input type='checkbox' class='input_check' id='email_{$key}' name=\"config_{$key}[]\" value=\"email\"" . ((is_array($_config['defaults']) AND in_array('email',$_config['defaults'])) ? (" checked=\"checked\"") : ("")) . " " . (($_config['disabled']) ? (" disabled=\"disabled\"") : ("")) . " />") : ("
							<input type='checkbox' class='input_check' name='' disabled='disabled' />
						")) . "
					</td>
					" . ((IPSMember::canReceiveMobileNotifications()) ? ("<td class='short'>
						<span class='notify_icon mobile' title='{$this->lang->words['notify_type_mobile']}'>&nbsp;</span>
						" . ((isset( $_config['options']['mobile'] )) ? ("<input type='checkbox' class='input_check' id='mobile_{$key}' name=\"config_{$key}[]\" value=\"mobile\"" . ((is_array($this->_config[$key]['defaults']) AND in_array('mobile',$this->_config[$key]['defaults'])) ? (" checked=\"checked\"") : ("")) . " " . (($this->_config[$key]['disabled']) ? (" disabled=\"disabled\"") : ("")) . " />") : ("
							<input type='checkbox' class='input_check' name='' disabled='disabled' />
						")) . "
					</td>") : ("")) . "
				</tr>") : ("")) . "
		
";
	}
	$_ips___x_retval .= '';
	unset( $__iteratorCount );
	return $_ips___x_retval;
}

/* -- notificationsLog --*/
function notificationsLog($notifications, $error='', $pages='') {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['notificationsLog'] ) )
{
$count_76d80e54985a3d05de7925de1f8ab5d2 = is_array($this->functionData['notificationsLog']) ? count($this->functionData['notificationsLog']) : 0;
$this->functionData['notificationsLog'][$count_76d80e54985a3d05de7925de1f8ab5d2]['notifications'] = $notifications;
$this->functionData['notificationsLog'][$count_76d80e54985a3d05de7925de1f8ab5d2]['error'] = $error;
$this->functionData['notificationsLog'][$count_76d80e54985a3d05de7925de1f8ab5d2]['pages'] = $pages;
}

$this->settings['_mobile_nav_home'] = 1;
$IPBHTML .= "<form action=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;tab=core&amp;area=removeNotifications&amp;do=remove", "public",'' ), "", "" ) . "\" id=\"checkBoxForm\" method=\"post\">
	<input type=\"hidden\" name=\"secure_key\" value=\"{$this->member->form_hash}\" />
	<div class='master_list' id='notifications'>
		<h2>{$this->lang->words['arch_notifications_head']}</h2>
		" . (($error) ? ("
		<p class='message error'>
			{$error}
		</p>
		") : ("" . (($this->request['confirm']) ? ("
			<p class='message'>
				{$this->lang->words['notify_rem_suc']}
			</p>
			") : ("")) . "")) . "
		".$this->__f__567f236fe1bcc5486f5834e29a784715($notifications,$error,$pages)."	</div>
	" . ((count($notifications)) ? ("
		<div class='submit'>
			<a href='" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;area=markNotification&amp;do=mark&amp;mark=all", "public",'' ), "", "" ) . "' id='ack_pm_notification' class='button secondary'>{$this->lang->words['notificationlog_mar']}</a>
		</div>
	") : ("")) . "
</form>";
return $IPBHTML;
}


function __f__567f236fe1bcc5486f5834e29a784715($notifications, $error='', $pages='')
{
	$_ips___x_retval = '';
	$__iteratorCount = 0;
	foreach( $notifications as $notification )
	{
		
		$__iteratorCount++;
		$_ips___x_retval .= "
			<div class='row touch-row'>
				<div class='icon'>
					" . (($notification['member']['member_id']) ? ("
						<a href='" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "showuser={$notification['member']['member_id']}", "public",'' ), "{$notification['member']['members_seo_name']}", "showuser" ) . "' class='ipsUserPhotoLink'>
							<img src='{$notification['member']['pp_small_photo']}' class='photo' />
						</a>
					") : ("")) . "
				</div>
				<div class='rowContent'>
					<strong>" . ((strpos( $notification['notify_title'], '<a href' ) === false) ? ("<a href='" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;tab=core&amp;area=viewNotification&amp;do=view&amp;view={$notification['notify_id']}", "public",'' ), "", "" ) . "' class='title'>") : ("")) . "
					{$notification['notify_title']}
					" . ((strpos( $notification['notify_title'], '<a href' ) === false) ? ("</a>") : ("")) . "
					</strong>
					<br />
					<span class='desc'>{$this->lang->words['th_sent']} " . IPSText::htmlspecialchars($this->registry->getClass('class_localization')->getDate($notification['notify_sent'],"long", 0)) . "</span>
				</div>
			</div>
		
";
	}
	$_ips___x_retval .= '';
	unset( $__iteratorCount );
	return $_ips___x_retval;
}

/* -- showNotification --*/
function showNotification($notification) {
$IPBHTML = "";
$IPBHTML .= "<fieldset class='ipsPad row2'>
	<h2>{$notification['notify_title']}</h2>
	<ul>
		<li class='field'>
			{$this->lang->words['notifyview_date']}
			<em>" . IPSText::htmlspecialchars($this->registry->getClass('class_localization')->getDate($notification['notify_sent'],"long", 0)) . "</em>
		</li>
	</ul>
</fieldset>
<fieldset class='ipsPad row1'>
	<ul>
		<li class='field'>
			{$notification['notify_text']}
		</li>
	</ul>
</fieldset>
<fieldset class='ipsPad row2'>
	<ul>
		<li class='field short'>
			<a href='" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;area=notificationlog", "public",'' ), "", "" ) . "' class='input_submit'>{$this->lang->words['goback']}</a>	
			<a href='" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;tab=core&amp;area=removeNotifications&amp;do=remove&amp;secure_key={$this->member->form_hash}&amp;notifications[]={$notification['notify_id']}", "public",'' ), "", "" ) . "' class='input_submit delete'>{$this->lang->words['deletenotification']}</a>
		</li>
	</ul>
</fieldset>";
return $IPBHTML;
}

/* -- unsubscribed --*/
function unsubscribed() {
$IPBHTML = "";
$IPBHTML .= "<!--no data in this master skin-->";
return $IPBHTML;
}

/* -- userCPTemplate --*/
function userCPTemplate($current_tab, $html, $tabs, $current_area, $errors=array(), $hide_form=0, $maxUpload=0) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['userCPTemplate'] ) )
{
$count_761b68f1369b8769f46d967ab15adb41 = is_array($this->functionData['userCPTemplate']) ? count($this->functionData['userCPTemplate']) : 0;
$this->functionData['userCPTemplate'][$count_761b68f1369b8769f46d967ab15adb41]['current_tab'] = $current_tab;
$this->functionData['userCPTemplate'][$count_761b68f1369b8769f46d967ab15adb41]['html'] = $html;
$this->functionData['userCPTemplate'][$count_761b68f1369b8769f46d967ab15adb41]['tabs'] = $tabs;
$this->functionData['userCPTemplate'][$count_761b68f1369b8769f46d967ab15adb41]['current_area'] = $current_area;
$this->functionData['userCPTemplate'][$count_761b68f1369b8769f46d967ab15adb41]['errors'] = $errors;
$this->functionData['userCPTemplate'][$count_761b68f1369b8769f46d967ab15adb41]['hide_form'] = $hide_form;
$this->functionData['userCPTemplate'][$count_761b68f1369b8769f46d967ab15adb41]['maxUpload'] = $maxUpload;
}
$IPBHTML .= "{$html}";
return $IPBHTML;
}


}


/*--------------------------------------------------*/
/* END OF FILE                                      */
/*--------------------------------------------------*/

?>