<?php
/*--------------------------------------------------*/
/* FILE GENERATED BY INVISION POWER BOARD 3         */
/* CACHE FILE: Skin set id: 1               */
/* CACHE FILE: Generated: Mon, 10 Jun 2013 14:58:13 GMT */
/* DO NOT EDIT DIRECTLY - THE CHANGES WILL NOT BE   */
/* WRITTEN TO THE DATABASE AUTOMATICALLY            */
/*--------------------------------------------------*/

class skin_editors_1 extends skinMaster{

/**
* Construct
*/
function __construct( ipsRegistry $registry )
{
	parent::__construct( $registry );
	

$this->_funcHooks = array();
$this->_funcHooks['ajaxEditBox'] = array('jsNotLoaded','ajaxerror','forceStd','showreason','appendedit','showappendedit','htmlstatus','showeditoptions');
$this->_funcHooks['editor'] = array('hasWrningInfo','jsNotLoaded','ismini','ismini','hasContent','hasType','ismini','hasHeight','hasMinimize','hasCallback','hasSaveKey','showEditor','hasToAcknowledge');
$this->_funcHooks['editorLoadJs'] = array('bypassCkEditor','hasimages','hasPastePlain');
$this->_funcHooks['mediaGenericWrapper'] = array('haswidth','hasheight','hasimage','hasdescription','genericmedia','hasrows');
$this->_funcHooks['sharedMedia'] = array('mediatabs');


}

/* -- ajaxEditBox --*/
function ajaxEditBox($post="", $pid=0, $error_msg="", $extraData) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_editors', $this->_funcHooks['ajaxEditBox'] ) )
{
$count_77c3d9e06ad023f5eb562f1e6a61b36f = is_array($this->functionData['ajaxEditBox']) ? count($this->functionData['ajaxEditBox']) : 0;
$this->functionData['ajaxEditBox'][$count_77c3d9e06ad023f5eb562f1e6a61b36f]['post'] = $post;
$this->functionData['ajaxEditBox'][$count_77c3d9e06ad023f5eb562f1e6a61b36f]['pid'] = $pid;
$this->functionData['ajaxEditBox'][$count_77c3d9e06ad023f5eb562f1e6a61b36f]['error_msg'] = $error_msg;
$this->functionData['ajaxEditBox'][$count_77c3d9e06ad023f5eb562f1e6a61b36f]['extraData'] = $extraData;
}

$pluginEditorHook = IPSLib::loadLibrary( IPS_ROOT_PATH . 'sources/classes/editor/composite.php', 'classes_editor_composite' );
	$editor = new $pluginEditorHook();

$pluginEditorHook = IPSLib::loadLibrary( IPS_ROOT_PATH . 'sources/classes/editor/composite.php', 'classes_editor_composite' );
	$editor = new $pluginEditorHook();
$IPBHTML .= "" . (($extraData['_loadJs']) ? ("
	" . ( method_exists( $this->registry->getClass('output')->getTemplate('editors'), 'editorLoadJs' ) ? $this->registry->getClass('output')->getTemplate('editors')->editorLoadJs(array( 'smilies' => $extraData['smilies'] )) : '' ) . "
") : ("")) . "
" . (($error_msg) ? ("
	<p id='error_msg_e{$pid}' class='message error'>{$error_msg}</p>
") : ("
	<p id='error_msg_e{$pid}' class='message error' style='display: none'>{$error_msg}</p>
")) . "
<input type='hidden' name='editor_ids[]' value='e{$pid}' />
<div class='ipsBox clearfix'>
	<div class='ipsBox_container'>
		<div class='ips_editor' id='editor_e{$pid}'>
			" . (($extraData['isHtml']) ? ("
				" . $editor->show('Post', array( 'editorName' => 'edit-' . $pid, 'type' => 'full', 'minimize' => 0, 'isHtml' => 1, 'legacyMode' => 'off' ), "$post")  . "
			") : ("
				" . $editor->show('Post', array( 'editorName' => 'edit-' . $pid, 'type' => 'full', 'minimize' => 0, 'legacyMode' => 'off' ), "$post")  . "
			")) . "
			" . (($extraData['showEditOptions']) ? ("<div class='row2 ipsPad ipsText_small desc'>
					" . (($extraData['showReason']) ? ("
						{$this->lang->words['preason_for_edit']} <input type='text' size='35' maxlength='250' class='input_text' id='post_edit_reason_{$pid}' name='post_edit_reason_{$pid}' value='{$extraData['reasonForEdit']}' />
					") : ("")) . "
					" . (($extraData['showAppendEdit']) ? ("<input type='checkbox' name='add_edit_{$pid}' id='add_edit_{$pid}' " . (($extraData['append_edit']) ? ("checked='checked'") : ("")) . " value='1' /> <label for='add_edit_{$pid}'>{$this->lang->words['show_edited_by']}</label>") : ("")) . "
				</div>
				" . (($extraData['checkBoxes']['html'] !== null) ? ("
					<div class='row2 ipsPad ipsText_small desc'>
						<input type=\"checkbox\" name=\"post_htmlstatus\" class=\"input_check\" value=\"1\" id='post_htmlstatus_{$pid}' {$extraData['checkBoxes']['html']} /> <label for='post_htmlstatus' data-tooltip='{$this->lang->words['pp_html_tooltip']}'>{$this->lang->words['pp_html']}</label>
						<script type=\"text/javascript\">
							ipb.textEditor.bindHtmlCheckbox( $('post_htmlstatus_{$pid}') );
						</script>
					</div>
				") : ("")) . "") : ("")) . "
			<fieldset class='submit'>
				<input type='submit' value='{$this->lang->words['save_changes']}' class='input_submit' id='edit_save_e{$pid}' tabindex='25' /> " . ((! $extraData['skipFullButton']) ? ("<input type='submit' value='{$this->lang->words['use_full_editor']}' class='input_submit alt' id='edit_switch_e{$pid}' />") : ("")) . " {$this->lang->words['or']} <a href='#' title='{$this->lang->words['cancel']}' class='cancel' id='edit_cancel_e{$pid}'>{$this->lang->words['cancel']}</a>
			</fieldset>
		</div>
	</div>
</div>";
return $IPBHTML;
}

/* -- editor --*/
function editor($formField='post', $content='', $options=array(), $autoSaveData=array(), $warningInfo='', $acknowledge=FALSE, $bbcodeVersion=null, $showEditor=TRUE) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_editors', $this->_funcHooks['editor'] ) )
{
$count_94f79c5931081ae9aee177acac2a5c0f = is_array($this->functionData['editor']) ? count($this->functionData['editor']) : 0;
$this->functionData['editor'][$count_94f79c5931081ae9aee177acac2a5c0f]['formField'] = $formField;
$this->functionData['editor'][$count_94f79c5931081ae9aee177acac2a5c0f]['content'] = $content;
$this->functionData['editor'][$count_94f79c5931081ae9aee177acac2a5c0f]['options'] = $options;
$this->functionData['editor'][$count_94f79c5931081ae9aee177acac2a5c0f]['autoSaveData'] = $autoSaveData;
$this->functionData['editor'][$count_94f79c5931081ae9aee177acac2a5c0f]['warningInfo'] = $warningInfo;
$this->functionData['editor'][$count_94f79c5931081ae9aee177acac2a5c0f]['acknowledge'] = $acknowledge;
$this->functionData['editor'][$count_94f79c5931081ae9aee177acac2a5c0f]['bbcodeVersion'] = $bbcodeVersion;
$this->functionData['editor'][$count_94f79c5931081ae9aee177acac2a5c0f]['showEditor'] = $showEditor;
}

/* Always return as UTF-8 */
			$jsonEncoded = IPSText::jsonEncodeForTemplate( $autoSaveData );
$IPBHTML .= "" . (($acknowledge) ? ("
	<p class='message'>{$this->lang->words['warnings_acknowledge_desc']} <a href='" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=members&amp;module=profile&amp;section=warnings&amp;do=acknowledge&amp;id={$acknowledge}", "public",'' ), "", "" ) . "' class='ipsButton_secondary'>{$this->lang->words['warnings_acknowledge_review']}</a></p>
") : ("" . (($warningInfo) ? ("
		<p class='message'>{$warningInfo}</p>
		<br />
	") : ("")) . "
	" . (($showEditor) ? ("		" . ((empty($this->_editorJsLoaded)) ? ("
			" . ( method_exists( $this->registry->getClass('output')->getTemplate('editors'), 'editorLoadJs' ) ? $this->registry->getClass('output')->getTemplate('editors')->editorLoadJs($options) : '' ) . "
		") : ("")) . "
		<input type='hidden' rel=\"include\" name='isRte' id='isRte_{$options['editorName']}' value='" . intval( $options['isRte'] ) . "' />
		<input type='hidden'  rel=\"include\" name='noSmilies' id='noSmilies_{$options['editorName']}' value='" . intval( $options['noSmilies'] ) . "' />
		" . (($bbcodeVersion || $options['bypassCKEditor']) ? ("<!-- NO JS FALLBACK -->
			<input type='hidden' rel=\"include\" name='noCKEditor' id='noCKEditor_{$options['editorName']}' value='1' />
			<textarea id=\"{$options['editorName']}\" name=\"{$formField}\" class='ipsEditor_textarea input_text'>$bbcodeVersion</textarea>
			<textarea id=\"{$options['editorName']}_js\" name=\"{$formField}_js\" style='display:none' class='ipsEditor_textarea input_text" . (($options['type'] == 'mini') ? (" mini") : ("")) . "'>{$content}</textarea>") : ("<input type='hidden' name='noCKEditor_{$options['editorName']}' id='noCKEditor_{$options['editorName']}' value='0' />
			<textarea id=\"{$options['editorName']}\" name=\"{$formField}\" class='ipsEditor_textarea input_text" . (($options['type'] == 'mini') ? (" mini") : ("")) . "'>{$content}</textarea>")) . "
		<p class='desc ipsPad' style='display: none' id='editor_html_message_{$options['editorName']}'>{$this->lang->words['editor_html_message']}</p>
		<script type=\"text/javascript\">
			ipb.textEditor.initialize('{$options['editorName']}', { type: " . (($options['type']) ? ("'{$options['type']}'") : ("''")) . ",
																	height: " . (($options['height'] > 0) ? ("{$options['height']}") : ("" . (($options['type'] == 'mini') ? ("150") : ("300")) . "")) . ",
																	minimize: " . (($options['minimize']) ? ("'{$options['minimize']}'") : ("0")) . ",
																	bypassCKEditor: " . intval( $options['bypassCKEditor'] ) . ",
																	delayInit: " . intval( $options['delayInit'] ) . ",
																	isHtml: " . intval( $options['isHtml'] ) . ",
																	isRte: " . intval( $options['isRte'] ) . ",
																	noSmilies: " . intval( $options['noSmilies'] ) . ",
																	disabledTags: " . IPSText::jsonEncodeForTemplate( $options['disabledTags'] ) . ",
																	isTypingCallBack: " . (($options['isTypingCallBack']) ? ("{$options['isTypingCallBack']}") : ("''")) . ",
																	ips_AutoSaveKey: " . (($options['autoSaveKey']) ? ("'{$options['autoSaveKey']}'") : ("''")) . ",
													                ips_AutoSaveData: {$jsonEncoded} } );
		</script>") : ("")) . "")) . "";
return $IPBHTML;
}

/* -- editorLoadJs --*/
function editorLoadJs($options='',$inlineLoad=false) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_editors', $this->_funcHooks['editorLoadJs'] ) )
{
$count_9b46a4dcb9a3ec1f9d377a941da48acb = is_array($this->functionData['editorLoadJs']) ? count($this->functionData['editorLoadJs']) : 0;
$this->functionData['editorLoadJs'][$count_9b46a4dcb9a3ec1f9d377a941da48acb]['options'] = $options;
$this->functionData['editorLoadJs'][$count_9b46a4dcb9a3ec1f9d377a941da48acb]['inlineLoad'] = $inlineLoad;
}

$this->_editorJsLoaded = true;
	$jsonEncoded = IPSText::jsonEncodeForTemplate( isset($options['smilies']) && is_array($options['smilies']) ? $options['smilies'] : array() );
	$options['bypassCKEditor'] = ( isset($options['bypassCKEditor']) ) ? $options['bypassCKEditor'] : 0;
$IPBHTML .= "" . $this->registry->getClass('output')->addJSModule("textEditor", "0" ) . "
" . $this->registry->getClass('output')->addJSModule("textEditor.bbcode", "0" ) . "" . (($options['bypassCKEditor'] != 1) ? ("" . ((defined("CK_LOAD_SOURCE") AND CK_LOAD_SOURCE) ? ("
		<!-- Load source files, not the minified version -->
		<script type=\"text/javascript\" src=\"{$this->settings['js_base_url']}js/3rd_party/ckeditor/ckeditor_source.js?nck={$this->settings['noCacheKey']}\"></script>
	") : ("
		<script type=\"text/javascript\" src=\"{$this->settings['js_base_url']}js/3rd_party/ckeditor/ckeditor.js?nck={$this->settings['noCacheKey']}\"></script>
	")) . "") : ("
	<script type=\"text/javascript\">
		CKEDITOR = { config: {} };
	</script>
")) . "
<script type=\"text/javascript\">
	/* Dynamic items */
	CKEDITOR.config.IPS_BBCODE          = " . IPSLib::fetchBbcodeAsJson( array( 'skip' => array( 'sharedmedia' ) ) ) . ";
	CKEDITOR.config.IPS_BBCODE_NOPARSE  = " . IPSLib::fetchBbcodeAsJson( array( 'noParseOnly' => 1 ) ) . ";
	CKEDITOR.config.IPS_BBCODE_DISABLED = " . IPSText::jsonEncodeForTemplate( $options['disabledTags'] ) . ";
	CKEDITOR.config.IPS_BBCODE_IMG_URL  = \"{$this->settings['public_cdn_url']}style_extra/bbcode_icons\";
	CKEDITOR.config.IPS_BBCODE_BUTTONS  = [];
	CKEDITOR.timestamp                  = \"{$this->settings['noCacheKey']}\";
	
	/* Has to go before config load */
	var IPS_smiley_path			= \"{$this->settings['emoticons_url']}/\";
	var IPS_smiles       		= " . ((! empty($options['smilies']['count'])) ? ("{$jsonEncoded}") : ("{}")) . ";
	var IPS_remove_plugins      = [];
	var IPS_extra_plugins       = [];
	
	/* Load our configuration */
	CKEDITOR.config.customConfig  = '{$this->settings['js_base_url']}js/3rd_party/ckeditor/ips_config.js';
	
	/* Override with prefs */
	CKEDITOR.config.CmdVAsPlainText = " . (($this->memberData['bw_paste_plain']) ? ("true") : ("false")) . ";
</script>
" . $this->registry->output->addToDocumentHead( 'importcss', "{$this->settings['css_base_url']}style_css/{$this->registry->output->skin['_csscacheid']}/ipb_ckeditor.css" ) . "";
return $IPBHTML;
}

/* -- editorSettings --*/
function editorSettings() {
$IPBHTML = "";
$IPBHTML .= "<h3>{$this->lang->words['editor_options']}</h3>
<div class='fixed_inner ipsBox row1'>
	<div class='ipsSettings'>
		<fieldset class='ipsSettings_section'>
			<ul class='ipsForm ipsForm_horizontal'>
				<li>
					<input type='checkbox' class='input_check' id='pastePlain' " . (($this->memberData['bw_paste_plain']) ? ("checked=\"checked\"") : ("")) . " name=\"pastePlain\" value=\"1\" /> &nbsp;<label for='pastePlain'>{$this->lang->words['editor_paste']}</label>
				</li>
				<li>
					<input type='checkbox' class='input_check' id='clearSavedContent' name=\"clearSavedContent\" value=\"1\" /> &nbsp;<label for='clearSavedContent'>{$this->lang->words['editor_clear_data']}</label>
				</li>
			</ul>
		</fieldset>
	</div>
	<div class='right' style='position: relative'>
		<a href='#' id='ipsEditorOptionsSave' class='ipsButton_secondary'>{$this->lang->words['editor_ok']}</a>
	</div>
</div>";
return $IPBHTML;
}

/* -- mediaGenericWrapper --*/
function mediaGenericWrapper($rows, $pages, $app, $plugin) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_editors', $this->_funcHooks['mediaGenericWrapper'] ) )
{
$count_c58750092abf6da337e9d3d1709f2c32 = is_array($this->functionData['mediaGenericWrapper']) ? count($this->functionData['mediaGenericWrapper']) : 0;
$this->functionData['mediaGenericWrapper'][$count_c58750092abf6da337e9d3d1709f2c32]['rows'] = $rows;
$this->functionData['mediaGenericWrapper'][$count_c58750092abf6da337e9d3d1709f2c32]['pages'] = $pages;
$this->functionData['mediaGenericWrapper'][$count_c58750092abf6da337e9d3d1709f2c32]['app'] = $app;
$this->functionData['mediaGenericWrapper'][$count_c58750092abf6da337e9d3d1709f2c32]['plugin'] = $plugin;
}
$IPBHTML .= "<div class='clearfix'>
	{$pages}
</div>
<div>
	<ul class='media_results'>
		" . ((count($rows)) ? ("
			".$this->__f__9cf30e3b46e703f75f0c4137cc884ebd($rows,$pages,$app,$plugin)."		") : ("
			<li class='no_messages'>
				{$this->lang->words['no_mymedia_rows']}
			</li>
		")) . "
	</ul>
</div>
<div class='clearfix'>
	{$pages}
</div>";
return $IPBHTML;
}


function __f__9cf30e3b46e703f75f0c4137cc884ebd($rows, $pages, $app, $plugin)
{
	$_ips___x_retval = '';
	$__iteratorCount = 0;
	foreach( $rows as $row )
	{
		
		$__iteratorCount++;
		$_ips___x_retval .= "
				<li class='result' onclick=\"return CKEDITOR.plugins.ipsmedia.insert( '{$row['insert']}' );\">
					" . (($row['image']) ? ("<img src='{$row['image']}' alt=''" . (($row['width']) ? (" width='{$row['width']}'") : ("")) . "" . (($row['height']) ? (" height='{$row['height']}'") : ("")) . " style='max-width: 80px;' class='media_image' /><br />") : ("")) . "
					
						<strong>" . IPSText::truncate( $row['title'], 15 ) . "</strong>
						" . (($row['desc']) ? ("
							<br /><span class='desc'>" . IPSText::truncate( $row['desc'], 15 ) . "</span>
						") : ("")) . "
				</li>
			
";
	}
	$_ips___x_retval .= '';
	unset( $__iteratorCount );
	return $_ips___x_retval;
}

/* -- sharedMedia --*/
function sharedMedia($tabs) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_editors', $this->_funcHooks['sharedMedia'] ) )
{
$count_823d38920c560bddf874002d1c3f0464 = is_array($this->functionData['sharedMedia']) ? count($this->functionData['sharedMedia']) : 0;
$this->functionData['sharedMedia'][$count_823d38920c560bddf874002d1c3f0464]['tabs'] = $tabs;
}
$IPBHTML .= "<h3>{$this->lang->words['mymedia_title']}</h3>
<div class='fixed_inner ipsBox'>
	<div id='mymedia_inserted' style='display: none'>{$this->lang->words['added_to_editor']}</div>
	<div class='ipsVerticalTabbed ipsLayout ipsLayout_withleft ipsLayout_smallleft clearfix'>
		<div class='ipsVerticalTabbed_tabs ipsLayout_left'>
			<ul id='mymedia_tabs'>
				".$this->__f__507c7f4609a071758b5b28be8feb7bb8($tabs)."			</ul>
		</div>
		<div class='ipsVerticalTabbed_content ipsLayout_content ipsBox_container' style='position: relative'>
			<div class='ipsType_small' id='mymedia_toolbar'>
				<a href='#' id='mymedia_finish' class='ipsButton no_width' onclick=\"CKEDITOR.plugins.ipsmedia.popup.hide(); return false;\"><img src='{$this->settings['img_url']}/accept.png' /> &nbsp;{$this->lang->words['mymedia_finished']}</a>
				<input type='hidden' name='sharedmedia_search_app' id='sharedmedia_search_app' value='' />
				<input type='hidden' name='sharedmedia_search_plugin' id='sharedmedia_search_plugin' value='' />
				<input type='text' name='search_string' id='sharedmedia_search' value=\"{$this->lang->words['start_typing_sms']}\" size='30' class='input_text inactive' />
				<input class='input_submit' type='button' id='sharedmedia_submit' value='{$this->lang->words['search_string_search']}' />
				&nbsp;&nbsp;<a href='#' id='sharedmedia_reset' class='ipsType_smaller'>{$this->lang->words['search_string_reset']}</a>
			</div>
			<div id='mymedia_content' class='ipsPad'>
				" . ( method_exists( $this->registry->getClass('output')->getTemplate('editors'), 'sharedMediaDefault' ) ? $this->registry->getClass('output')->getTemplate('editors')->sharedMediaDefault() : '' ) . "
			</div>
		</div>
	</div>
</div>
<script type='text/javascript'>
ipb.vars['sm_init_value']	= \"{$this->lang->words['start_typing_sms']}\";
CKEDITOR.plugins.ipsmedia.searchinit();
</script>";
return $IPBHTML;
}


function __f__507c7f4609a071758b5b28be8feb7bb8($tabs)
{
	$_ips___x_retval = '';
	$__iteratorCount = 0;
	foreach( $tabs as $tab )
	{
		
		$__iteratorCount++;
		$_ips___x_retval .= "
					<li id='{$tab['app']}_{$tab['plugin']}'><a href='#' onclick=\"return CKEDITOR.plugins.ipsmedia.loadTab( '{$tab['app']}', '{$tab['plugin']}' );\">{$tab['title']}</a></li>
				
";
	}
	$_ips___x_retval .= '';
	unset( $__iteratorCount );
	return $_ips___x_retval;
}

/* -- sharedMediaDefault --*/
function sharedMediaDefault() {
$IPBHTML = "";
$IPBHTML .= "<h1 class='ipsType_pagetitle' style='text-align: center'>{$this->lang->words['mymedia_title']}</h1>
				<h2 class='ipsType_subtitle desc' style='text-align: center'>{$this->lang->words['shareable_media_warn']}</h2>";
return $IPBHTML;
}


}


/*--------------------------------------------------*/
/* END OF FILE                                      */
/*--------------------------------------------------*/

?>